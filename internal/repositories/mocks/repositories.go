// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=mocks/repositories.go -package=mocks_repositories
//

// Package mocks_repositories is a generated GoMock package.
package mocks_repositories

import (
	context "context"
	entities "notification_system/internal/entities"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
	isgomock struct{}
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// CreateNotifications mocks base method.
func (m *MockNotificationRepository) CreateNotifications(ctx context.Context, notifications []*entities.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotifications", ctx, notifications)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotifications indicates an expected call of CreateNotifications.
func (mr *MockNotificationRepositoryMockRecorder) CreateNotifications(ctx, notifications any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotifications", reflect.TypeOf((*MockNotificationRepository)(nil).CreateNotifications), ctx, notifications)
}

// GetNewNotifications mocks base method.
func (m *MockNotificationRepository) GetNewNotifications(ctx context.Context, limit int) ([]*entities.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewNotifications", ctx, limit)
	ret0, _ := ret[0].([]*entities.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewNotifications indicates an expected call of GetNewNotifications.
func (mr *MockNotificationRepositoryMockRecorder) GetNewNotifications(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewNotifications", reflect.TypeOf((*MockNotificationRepository)(nil).GetNewNotifications), ctx, limit)
}

// GetNotificationByID mocks base method.
func (m *MockNotificationRepository) GetNotificationByID(ctx context.Context, id uuid.UUID) (*entities.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationByID", ctx, id)
	ret0, _ := ret[0].(*entities.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationByID indicates an expected call of GetNotificationByID.
func (mr *MockNotificationRepositoryMockRecorder) GetNotificationByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationByID", reflect.TypeOf((*MockNotificationRepository)(nil).GetNotificationByID), ctx, id)
}

// GetNotificationsByIDs mocks base method.
func (m *MockNotificationRepository) GetNotificationsByIDs(ctx context.Context, ids []uuid.UUID) ([]*entities.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationsByIDs", ctx, ids)
	ret0, _ := ret[0].([]*entities.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationsByIDs indicates an expected call of GetNotificationsByIDs.
func (mr *MockNotificationRepositoryMockRecorder) GetNotificationsByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationsByIDs", reflect.TypeOf((*MockNotificationRepository)(nil).GetNotificationsByIDs), ctx, ids)
}

// UpdateNotificationRetries mocks base method.
func (m *MockNotificationRepository) UpdateNotificationRetries(ctx context.Context, id uuid.UUID, retries uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationRetries", ctx, id, retries)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationRetries indicates an expected call of UpdateNotificationRetries.
func (mr *MockNotificationRepositoryMockRecorder) UpdateNotificationRetries(ctx, id, retries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationRetries", reflect.TypeOf((*MockNotificationRepository)(nil).UpdateNotificationRetries), ctx, id, retries)
}

// UpdateNotificationsStatus mocks base method.
func (m *MockNotificationRepository) UpdateNotificationsStatus(ctx context.Context, ids []uuid.UUID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationsStatus", ctx, ids, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationsStatus indicates an expected call of UpdateNotificationsStatus.
func (mr *MockNotificationRepositoryMockRecorder) UpdateNotificationsStatus(ctx, ids, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationsStatus", reflect.TypeOf((*MockNotificationRepository)(nil).UpdateNotificationsStatus), ctx, ids, status)
}
